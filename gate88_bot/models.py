import os
from sqlalchemy import Column, Integer, String, Text, Boolean, DateTime, Enum, LargeBinary
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import declarative_base, sessionmaker
import enum
import datetime
from typing import Dict, Any, Optional
from aiogram import Bot  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import logging
from aiogram import types


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Base = declarative_base()

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_IDS = [int(id_) for id_ in os.getenv("ADMIN_IDS", "").split(",") if id_]
NOTIFICATION_CHANNEL_ID = os.getenv("NOTIFICATION_CHANNEL_ID")


class PlaceEnum(str, enum.Enum):
    """–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
    POBEDA = "–ü–æ–±–µ–¥–∞"
    PARK_VZLYOT = "–ü–∞—Ä–∫ –í–∑–ª—ë—Ç"


class Feedback(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
    __tablename__ = "feedbacks"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    place = Column(Enum(PlaceEnum), nullable=False)
    menu_rating = Column(Integer, nullable=False)
    staff_rating = Column(Integer, nullable=False)
    cleanliness_rating = Column(Integer, nullable=False)
    recommend = Column(Boolean, nullable=False)
    review_text = Column(Text, nullable=False)
    photo_data = Column(LargeBinary, nullable=True)
    photo_skipped = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "id": self.id,
            "user_id": self.user_id,
            "place": self.place.value,
            "menu_rating": self.menu_rating,
            "staff_rating": self.staff_rating,
            "cleanliness_rating": self.cleanliness_rating,
            "recommend": self.recommend,
            "review_text": self.review_text,
            "has_photo": bool(self.photo_data),
            "created_at": self.created_at.isoformat(),
            "photo_skipped": self.photo_skipped
        }


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    engine = create_async_engine("sqlite+aiosqlite:///feedback.db")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


async def get_session() -> AsyncSession:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    engine = create_async_engine("sqlite+aiosqlite:///feedback.db")
    async_session = sessionmaker(
        engine, expire_on_commit=False, class_=AsyncSession
    )
    return async_session()


async def save_feedback(data: dict, photo_data: bytes = None) -> Feedback:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Feedback"""
    async with await get_session() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞
            feedback = Feedback(
                user_id=data["user_id"],
                place=data["place"],
                menu_rating=data["menu_rating"],
                staff_rating=data["staff_rating"],
                cleanliness_rating=data["cleanliness_rating"],
                recommend=data["recommend"],
                review_text=data["review_text"],
                photo_data=photo_data,
                photo_skipped=photo_data is None
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            session.add(feedback)
            await session.commit()

            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
            await session.refresh(feedback)

            logger.info(f"–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, ID: {feedback.id}")
            return feedback

        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {str(e)}", exc_info=True)
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ


async def send_notification(feedback: Feedback, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
    try:
        text = (
            "üì¢ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {feedback.user_id}\n"
            f"üè¢ –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {feedback.place.value}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∏: –ú–µ–Ω—é {feedback.menu_rating}/5, –ü–µ—Ä—Å–æ–Ω–∞–ª {feedback.staff_rating}/5, –ß–∏—Å—Ç–æ—Ç–∞ {feedback.cleanliness_rating}/5\n"
            f"üëç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç: {'–î–∞' if feedback.recommend else '–ù–µ—Ç'}\n"
            f"üìù –û—Ç–∑—ã–≤: {feedback.review_text}\n"
            f"üì∏ –§–æ—Ç–æ: {'–ï—Å—Ç—å' if feedback.photo_data else '–ù–µ—Ç'}"
        )

        if feedback.photo_data:
            with open("temp_photo.jpg", "wb") as f:
                f.write(feedback.photo_data)

            await bot.send_photo(
                chat_id=int(NOTIFICATION_CHANNEL_ID),
                photo=types.FSInputFile("temp_photo.jpg"),
                caption=text
            )
            os.remove("temp_photo.jpg")
        else:
            await bot.send_message(
                chat_id=int(NOTIFICATION_CHANNEL_ID),
                text=text
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS
