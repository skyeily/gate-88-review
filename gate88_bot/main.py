import os
import csv
import json
import logging
import tempfile
from datetime import datetime, timezone, timedelta
from io import BytesIO
from typing import List, Optional

from dotenv import load_dotenv
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
    FSInputFile,
    InputFile,
    MessageEntity,
    User,
)

from admin import get_admin_kb, get_export_kb
from models import Base, Feedback, PlaceEnum


class AdminStates(StatesGroup):
    waiting_period = State()
    waiting_broadcast = State()
    waiting_export_format = State()
    broadcast = State()
    waiting_add_admin = State()


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤
LAST_TEST_TIME = None


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///feedback.db")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))
                 ) if os.getenv("ADMIN_IDS") else []
NOTIFICATION_CHANNEL_ID = os.getenv("NOTIFICATION_CHANNEL_ID")


logger.info(f"ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {NOTIFICATION_CHANNEL_ID}")
logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
engine = create_async_engine(DATABASE_URL)
async_session = sessionmaker(
    engine, expire_on_commit=False, class_=AsyncSession)


async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞


class SurveyStates(StatesGroup):
    choosing_place = State()
    rate_menu = State()
    rate_staff = State()
    rate_clean = State()
    ask_recommend = State()
    ask_review = State()
    ask_photo = State()


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ========== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========


def get_main_menu_kb(user_id: int = None):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üçΩ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
                                  callback_data="leave_feedback")],
            [InlineKeyboardButton(text="‚≠ê –ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã",
                                  callback_data="our_feedbacks")],
            [InlineKeyboardButton(
                text="üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data="show_map")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö",
                                  callback_data="about_cafes")]
        ]
    )

    if user_id and user_id in ADMIN_IDS:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(
                text="üëë –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel")]
        )

    return keyboard


def get_cafe_selection_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üè¢ –ü–æ–±–µ–¥–∞", callback_data="place_–ü–æ–±–µ–¥–∞")],
            [InlineKeyboardButton(text="‚úàÔ∏è –ü–∞—Ä–∫ –í–∑–ª—ë—Ç",
                                  callback_data="place_–ü–∞—Ä–∫ –í–∑–ª—ë—Ç")],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )


def get_rating_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text=str(i), callback_data=f"rate_{i}") for i in range(1, 6)
        ]]
    )


def get_yesno_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–î–∞", callback_data="recommend_yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="recommend_no")
        ]]
    )


def get_skip_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
        ]]
    )

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========


async def calculate_average_ratings(user_id=None):
    async with async_session() as session:
        query = select(Feedback)
        if user_id:
            query = query.where(Feedback.user_id == user_id)

        feedbacks = (await session.execute(query)).scalars().all()

        if not feedbacks:
            return None

        total = len(feedbacks)
        avg_menu = sum(f.menu_rating for f in feedbacks) / total
        avg_staff = sum(f.staff_rating for f in feedbacks) / total
        avg_clean = sum(f.cleanliness_rating for f in feedbacks) / total
        avg_total = (avg_menu + avg_staff + avg_clean) / 3

        return {
            'total': total,
            'avg_menu': round(avg_menu, 2),
            'avg_staff': round(avg_staff, 2),
            'avg_clean': round(avg_clean, 2),
            'avg_total': round(avg_total, 2)
        }


async def save_feedback(data, photo_data=None, photo_skipped=False):
    async with async_session() as session:
        feedback = Feedback(
            user_id=data["user_id"],
            place=data["place"],
            menu_rating=data["menu_rating"],
            staff_rating=data["staff_rating"],
            cleanliness_rating=data["cleanliness_rating"],
            recommend=data["recommend"],
            review_text=data["review_text"],
            photo_data=photo_data,
            photo_skipped=photo_skipped
        )
        session.add(feedback)
        await session.commit()
        # —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≥–µ–Ω–µ—Ä—ë–Ω–Ω—ã–π ID
        await session.refresh(feedback)
        return feedback


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üç¥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \n—Å–∏—Å—Ç–µ–º—É –æ—Ç–∑—ã–≤–æ–≤ Gate 88!",
        reply_markup=get_main_menu_kb(message.from_user.id)
    )


@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_kb(callback.from_user.id)
    )
    await callback.answer()


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ==========

@dp.callback_query(F.data == "leave_feedback")
async def start_feedback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞:",
        reply_markup=get_cafe_selection_kb()
    )
    await state.set_state(SurveyStates.choosing_place)
    await callback.answer()


@dp.callback_query(F.data == "my_feedbacks")
async def show_my_feedbacks(callback: types.CallbackQuery):
    ratings = await calculate_average_ratings(callback.from_user.id)

    if not ratings:
        text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"
    else:
        text = (
            "‚≠ê –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üçΩ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω—é: {ratings['avg_menu']}/5\n"
            f"üëî –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {ratings['avg_staff']}/5\n"
            f"üßπ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ—Ç—ã: {ratings['avg_clean']}/5\n"
            f"üî¢ –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {ratings['avg_total']}/5\n\n"
            f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {ratings['total']}"
        )

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]]
        )
    )
    await callback.answer()


@dp.callback_query(F.data == "show_map")
async def show_map(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üó∫Ô∏è –ù–∞—à–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ:\n\n",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="üè¢ –ü–æ–±–µ–¥–∞", url="https://yandex.com/maps/org/gate_88/221466389401"),
                InlineKeyboardButton(
                    text="‚úàÔ∏è –ü–∞—Ä–∫ –í–∑–ª—ë—Ç", url="https://yandex.com/maps/org/gate_88/93215603368")
            ], [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]]
        ),
        disable_web_page_preview=True
    )
    await callback.answer()


@dp.callback_query(F.data == "about_cafes")
async def show_about_cafes(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ÑπÔ∏è –û –Ω–∞—à–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö:\n\n"
        "üè¢ –ü–æ–±–µ–¥–∞:\n"
        "üìç —É–ª. –ü–ª–æ—â–∞–¥—å 30-–ª–µ—Ç–∏—è –ü–æ–±–µ–¥—ã, 2\n"
        "üïí 10:00-22:00\n\n"
        "‚úàÔ∏è –ü–∞—Ä–∫ –í–∑–ª—ë—Ç:\n"
        "üìç –ü–∞—Ä–∫ –í–∑–ª—ë—Ç, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –î–æ–º–æ–¥–µ–¥–æ–≤–æ\n"
        "üïí 10:00-22:00",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]]
        )
    )
    await callback.answer()


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ==========

def register_admin_handlers(dp: Dispatcher, session_maker):
    @dp.callback_query(F.data == "admin_panel")
    async def admin_panel(callback: CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await callback.message.edit_text(
            "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=get_admin_kb()
        )
        await callback.answer()


@dp.callback_query(F.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await callback.message.edit_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton(
                    text="üìù –í—Å–µ –æ—Ç–∑—ã–≤—ã", callback_data="admin_reviews")],
                [InlineKeyboardButton(
                    text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
                [InlineKeyboardButton(
                    text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
                [InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")],
                [InlineKeyboardButton(
                    text="üîô –í –º–µ–Ω—é", callback_data="back_to_main")]
            ]
        )
    )
    await callback.answer()


@dp.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_kb()
    )
    await callback.answer()


@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ]
        )
    )

    await state.set_state(AdminStates.waiting_broadcast)
    await callback.answer()


@dp.message(AdminStates.waiting_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    async with async_session() as session:
        user_ids = (await session.execute(
            select(Feedback.user_id).distinct()
        )).scalars().all()

        success = 0
        for user_id in set(user_ids):
            try:
                await message.copy_to(user_id)
                success += 1
            except:
                continue

        await message.answer(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –∏–∑ {len(set(user_ids))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=get_admin_kb()
        )
    await state.clear()


async def export_to_csv(feedbacks: List[Feedback]):
    filename = "feedbacks.csv"
    with open(filename, 'w', newline='', encoding='utf-8-sig') as file:
        writer = csv.writer(file)
        writer.writerow(['ID', 'User ID', 'Place', 'Menu',
                        'Staff', 'Clean', 'Recommend', 'Review', 'Date'])
        for fb in feedbacks:
            writer.writerow([
                fb.id,
                fb.user_id,
                fb.place.value,
                fb.menu_rating,
                fb.staff_rating,
                fb.cleanliness_rating,
                '–î–∞' if fb.recommend else '–ù–µ—Ç',
                fb.review_text,
                fb.created_at.strftime('%Y-%m-%d %H:%M')
            ])
    return filename


async def export_to_json(feedbacks: List[Feedback]):
    filename = "feedbacks.json"
    data = [{
        'id': fb.id,
        'user_id': fb.user_id,
        'place': fb.place.value,
        'ratings': {
            'menu': fb.menu_rating,
            'staff': fb.staff_rating,
            'clean': fb.cleanliness_rating
        },
        'recommend': fb.recommend,
        'review': fb.review_text,
        'date': fb.created_at.isoformat()
    } for fb in feedbacks]

    with open(filename, 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=2)
    return filename


def get_period_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞ –¥–µ–Ω—å", callback_data="period_day")],
            [InlineKeyboardButton(
                text="–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="period_week")],
            [InlineKeyboardButton(
                text="–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month")],
            [InlineKeyboardButton(text="–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è",
                                  callback_data="period_all")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )


@dp.callback_query(F.data == "admin_export")
async def admin_export(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await callback.message.edit_text(
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=get_export_kb()
    )
    await callback.answer()


def get_export_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="CSV", callback_data="export_csv")],
            [InlineKeyboardButton(text="JSON", callback_data="export_json")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )


@dp.callback_query(F.data.startswith("export_"))
async def process_export(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    format = callback.data.split("_")[1]

    async with async_session() as session:
        feedbacks = (await session.execute(
            select(Feedback)
            .order_by(Feedback.created_at.desc())
        )).scalars().all()

        if format == "csv":
            filename = await export_to_csv(feedbacks)
        else:
            filename = await export_to_json(feedbacks)

        await callback.message.answer_document(FSInputFile(filename))
        os.remove(filename)

        await callback.message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã",
            reply_markup=get_admin_kb()
        )
    await callback.answer()


@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    async with async_session() as session:
        total = (await session.execute(select(func.count(Feedback.id)))).scalar()
        avg_menu = (await session.execute(select(func.avg(Feedback.menu_rating)))).scalar() or 0
        avg_staff = (await session.execute(select(func.avg(Feedback.staff_rating)))).scalar() or 0
        avg_clean = (await session.execute(select(func.avg(Feedback.cleanliness_rating)))).scalar() or 0

        text = (
            "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω—é: {round(avg_menu, 2)}/5\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {round(avg_staff, 2)}/5\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ—Ç—ã: {round(avg_clean, 2)}/5"
        )

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
                ]]
            )
        )
    await callback.answer()


async def get_stats(session: AsyncSession, period: timedelta = None):
    query = select(Feedback)
    if period:
        start_date = datetime.now() - period
        query = query.where(Feedback.created_at >= start_date)

    result = await session.execute(query)
    feedbacks = result.scalars().all()

    if not feedbacks:
        return None

    stats = {
        'total': len(feedbacks),
        'avg_menu': round(sum(f.menu_rating for f in feedbacks) / len(feedbacks), 2),
        'avg_staff': round(sum(f.staff_rating for f in feedbacks) / len(feedbacks), 2),
        'avg_clean': round(sum(f.cleanliness_rating for f in feedbacks) / len(feedbacks), 2),
        'positive': sum(1 for f in feedbacks if f.recommend),
        'with_photo': sum(1 for f in feedbacks if f.photo_data)
    }
    return stats


@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_period_kb()
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("period_"))
async def show_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    period = callback.data.split("_")[1]
    period_map = {
        'day': timedelta(days=1),
        'week': timedelta(weeks=1),
        'month': timedelta(days=30),
        'all': None
    }

    async with async_session() as session:
        stats = await get_stats(session, period_map.get(period))

        if not stats:
            text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        else:
            text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {'–∑–∞ ' + period if period != 'all' else '–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è'}:\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω—é: {stats['avg_menu']}/5\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {stats['avg_staff']}/5\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ—Ç—ã: {stats['avg_clean']}/5\n"
                f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç: {stats['positive']} ({round(stats['positive']/stats['total']*100)}%)\n"
                f"‚Ä¢ –° —Ñ–æ—Ç–æ: {stats['with_photo']}"
            )

        await callback.message.edit_text(
            text,
            reply_markup=get_admin_kb()
        )
    await callback.answer()


@dp.callback_query(F.data == "admin_reviews")
async def admin_reviews(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    async with async_session() as session:
        feedbacks = (await session.execute(
            select(Feedback)
            .order_by(Feedback.created_at.desc())
            .limit(10)
        )).scalars().all()

        if not feedbacks:
            text = "üì≠ –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
        else:
            text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤:\n\n"
            for fb in feedbacks:
                text += (
                    f"üìÖ {fb.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {fb.user_id}\n"
                    f"üè¢ {fb.place.value}\n"
                    f"‚≠ê –û—Ü–µ–Ω–∫–∏: {fb.menu_rating}/{fb.staff_rating}/{fb.cleanliness_rating}\n"
                    f"üìù {fb.review_text[:100]}{'...' if len(fb.review_text) > 100 else ''}\n\n"
                )

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
                ]]
            )
        )
    await callback.answer()


async def can_leave_feedback(user_id: int, place: PlaceEnum) -> int:

    async with async_session() as session:
        query = (
            select(Feedback)
            .where(Feedback.user_id == user_id, Feedback.place == place)
            .order_by(Feedback.created_at.desc())
            .limit(1)
        )

        last = (await session.execute(query)).scalars().first()

    if not last:
        return 0

    elapsed = (datetime.utcnow() - last.created_at).total_seconds()
    remaining = 600 - int(elapsed)
    return remaining if remaining > 0 else 0


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∑—ã–≤–∞ ==========

@dp.callback_query(F.data.startswith("place_"), SurveyStates.choosing_place)
async def process_place(callback: types.CallbackQuery, state: FSMContext):
    try:
        place_value = callback.data[6:]  # "place_–ü–æ–±–µ–¥–∞" -> "–ü–æ–±–µ–¥–∞"
        place = PlaceEnum(place_value)

        await state.update_data(
            user_id=callback.from_user.id,
            place=place
        )

        await callback.message.edit_text(
            f"üè¢ –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {place.value}\n"
            "üçΩÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –º–µ–Ω—é –æ—Ç 1 –¥–æ 5:",
            reply_markup=get_rating_kb()
        )
        await state.set_state(SurveyStates.rate_menu)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è")
    finally:
        await callback.answer()


@dp.callback_query(F.data.startswith("rate_"), SurveyStates.rate_menu)
async def process_menu_rating(callback: types.CallbackQuery, state: FSMContext):
    try:
        rating = int(callback.data.split("_")[1])
        await state.update_data(menu_rating=rating)

        await callback.message.edit_text(
            f"üçΩÔ∏è –ú–µ–Ω—é: {rating}/5\n"
            "üëî –û—Ü–µ–Ω–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª –æ—Ç 1 –¥–æ 5:",
            reply_markup=get_rating_kb()
        )
        await state.set_state(SurveyStates.rate_staff)
    except Exception as e:
        logger.error(f"Error processing menu rating: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏")
    finally:
        await callback.answer()


@dp.callback_query(F.data.startswith("rate_"), SurveyStates.rate_staff)
async def process_staff_rating(callback: types.CallbackQuery, state: FSMContext):
    try:
        rating = int(callback.data.split("_")[1])
        await state.update_data(staff_rating=rating)

        await callback.message.edit_text(
            f"üëî –ü–µ—Ä—Å–æ–Ω–∞–ª: {rating}/5\n"
            "üßπ –û—Ü–µ–Ω–∏—Ç–µ —á–∏—Å—Ç–æ—Ç—É –æ—Ç 1 –¥–æ 5:",
            reply_markup=get_rating_kb()
        )
        await state.set_state(SurveyStates.rate_clean)
    except Exception as e:
        logger.error(f"Error processing staff rating: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏")
    finally:
        await callback.answer()


@dp.callback_query(F.data.startswith("rate_"), SurveyStates.rate_clean)
async def process_clean_rating(callback: types.CallbackQuery, state: FSMContext):
    try:
        rating = int(callback.data.split("_")[1])
        await state.update_data(cleanliness_rating=rating)

        await callback.message.edit_text(
            f"üßπ –ß–∏—Å—Ç–æ—Ç–∞: {rating}/5\n"
            "–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞—Å –¥—Ä—É–∑—å—è–º?",
            reply_markup=get_yesno_kb()
        )
        await state.set_state(SurveyStates.ask_recommend)
    except Exception as e:
        logger.error(f"Error processing cleanliness rating: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏")
    finally:
        await callback.answer()


@dp.callback_query(F.data.startswith("recommend_"), SurveyStates.ask_recommend)
async def process_recommend(callback: types.CallbackQuery, state: FSMContext):
    try:
        recommend = callback.data.split("_")[1] == "yes"
        await state.update_data(recommend=recommend)

        await callback.message.edit_text(
            f"üëç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'–î–∞' if recommend else '–ù–µ—Ç'}\n"
            "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ (–∏–ª–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ):"
        )
        await state.set_state(SurveyStates.ask_review)
    except Exception as e:
        logger.error(f"Error processing recommendation: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    finally:
        await callback.answer()


@dp.message(SurveyStates.ask_review)
async def process_review(message: Message, state: FSMContext):
    try:
        review_text = "–Ω–µ—Ç" if message.text.lower() == "–Ω–µ—Ç" else message.text
        await state.update_data(review_text=review_text)

        await message.answer(
            "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏–ª–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=get_skip_kb()
        )
        await state.set_state(SurveyStates.ask_photo)
    except Exception as e:
        logger.error(f"Error processing review: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞")


@dp.callback_query(F.data == "skip_photo", SurveyStates.ask_photo)
async def skip_photo(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    retry = await can_leave_feedback(data["user_id"], data["place"])
    if retry:
        await callback.answer(
            f"üö´ –°–ø–∞–º! –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {retry//60} –º–∏–Ω –∏ {retry % 60} —Å–µ–∫",
            show_alert=True
        )
        return
    if not is_admin(data["user_id"]):
        retry = await can_leave_feedback(data["user_id"], data["place"])
        if retry:
            await callback.answer(
                f"üö´ –°–ø–∞–º! –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å "
                f"—á–µ—Ä–µ–∑ {retry//60} –º–∏–Ω {retry % 60} —Å–µ–∫",
                show_alert=True
            )
            return
    try:
        feedback = await save_feedback(
            data=data,
            photo_data=None,
            photo_skipped=True
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç Feedback: {feedback.__dict__}")
        logger.info(f"–¢–∏–ø feedback: {type(feedback)}")
        logger.info(f"–ê—Ç—Ä–∏–±—É—Ç—ã: {dir(feedback)}")
        logger.info(f"–ó–Ω–∞—á–µ–Ω–∏—è: {feedback.__dict__}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Feedback: {e}")
        raise
    await send_feedback_notification(feedback)

    await callback.message.edit_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!",
        reply_markup=get_main_menu_kb(callback.from_user.id)
    )
    await state.clear()


@dp.message(SurveyStates.ask_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    # –°—Ä–∞–∑—É –¥–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –°–ø–∞–º-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–∞–¥–º–∏–Ω—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
    if not is_admin(data["user_id"]):
        retry = await can_leave_feedback(data["user_id"], data["place"])
        if retry:
            await message.answer(
                f"üö´ –°–ø–∞–º! –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å "
                f"—á–µ—Ä–µ–∑ {retry//60} –º–∏–Ω {retry % 60} —Å–µ–∫"
            )
            return

    try:
        logger.info("== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ-–æ—Ç–∑—ã–≤–∞ ==")

        # 1. –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        photo_data = await bot.download_file(file.file_path)
        photo_bytes = photo_data.getvalue() if photo_data else None

        # 2. –¢–µ–ø–µ—Ä—å data —É–∂–µ –µ—Å—Ç—å
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        feedback = await save_feedback(data=data, photo_data=photo_bytes)
        logger.info(f"–û–±—ä–µ–∫—Ç Feedback —Å–æ–∑–¥–∞–Ω: ID {feedback.id}")

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if NOTIFICATION_CHANNEL_ID:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª {NOTIFICATION_CHANNEL_ID}")
            try:
                success = await send_feedback_notification(feedback)
                logger.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if success else '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        # 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
            reply_markup=get_main_menu_kb(message.from_user.id)
        )

        # 6. –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()
        logger.info("== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ==")

    except Exception as e:
        logger.error(f"!!! –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=get_skip_kb()
        )


async def send_feedback_notification(feedback: Feedback):
    if not NOTIFICATION_CHANNEL_ID:
        return False

    try:
        user_chat = await bot.get_chat(feedback.user_id)
        if user_chat.username:
            username_disp = f"@{user_chat.username}"
        else:
            username_disp = user_chat.first_name
    except Exception:
        username_disp = str(feedback.user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏ —ç—Ç–æ –æ—Ç–∑—ã–≤
    if feedback.id == 999:  # –ù–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π ID
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –¢–ï–°–¢–û–í–û–ì–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    else:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ ID: {feedback.id}")

    if not NOTIFICATION_CHANNEL_ID:
        logger.warning("‚ùó ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
    try:
        chat = await bot.get_chat(NOTIFICATION_CHANNEL_ID)
        logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(e)}")
        return False

    moscow_tz = timezone(timedelta(hours=3), name="MSC")
    utc_dt = feedback.created_at.replace(tzinfo=timezone.utc)
    local_dt = utc_dt.astimezone(moscow_tz)

    date_line = f"üìÖ –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞: {local_dt.strftime('%d.%m.%Y %H:%M')} ({moscow_tz.tzname(None)})"

    user_line = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username_disp} / {feedback.user_id}"
    place_line = f"üè¢ –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {feedback.place.value}"
    ratings_line = f"‚≠êÔ∏è –û—Ü–µ–Ω–∫–∏: –ú–µ–Ω—é: {feedback.menu_rating}/5, –ü–µ—Ä—Å–æ–Ω–∞–ª: {feedback.staff_rating}/5, –ß–∏—Å—Ç–æ—Ç–∞: {feedback.cleanliness_rating}/5"
    review_line = f"üìù –û—Ç–∑—ã–≤: {feedback.review_text[:100]}"
    photo_line = f"üì∏ –§–æ—Ç–æ: {'–ï—Å—Ç—å' if feedback.photo_data else '–ù–µ—Ç'}"

    text = "\n".join([
        "üì¢ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!",
        "",
        date_line,
        "",
        user_line,
        place_line,
        ratings_line,
        review_line,
        photo_line
    ])

    if feedback.photo_data:
        import tempfile
        import os
        from aiogram.types import FSInputFile

        tmp = tempfile.NamedTemporaryFile(suffix=".jpg", delete=False)
        try:
            tmp.write(feedback.photo_data)
            tmp.flush()
            tmp.close()

            if os.path.getsize(tmp.name) == 0:
                logger.error("‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π!")
                return False

            result = await bot.send_photo(
                chat_id=int(NOTIFICATION_CHANNEL_ID),
                photo=FSInputFile(tmp.name),
                caption=text,
                parse_mode=ParseMode.HTML
            )
            logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, message_id: {result.message_id}")
            return True
        finally:
            os.unlink(tmp.name)

    else:
        await bot.send_message(
            chat_id=int(NOTIFICATION_CHANNEL_ID),
            text=text,
            parse_mode=ParseMode.HTML
        )

    return True


async def calculate_stats_per_place():
    async with async_session() as session:
        q = (
            select(
                Feedback.place,
                func.count(Feedback.id),
                func.avg(Feedback.menu_rating),
                func.avg(Feedback.staff_rating),
                func.avg(Feedback.cleanliness_rating),
            )
            .group_by(Feedback.place)
        )
        result = await session.execute(q)
        records = result.all()  # records ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π

    stats = {}
    total = 0
    for place_enum, cnt, avg_menu, avg_staff, avg_clean in records:
        place_name = place_enum.value
        cnt = cnt or 0
        avg_menu = round(avg_menu or 0, 2)
        avg_staff = round(avg_staff or 0, 2)
        avg_clean = round(avg_clean or 0, 2)
        avg_total = round((avg_menu + avg_staff + avg_clean) / 3, 2)

        stats[place_name] = {
            "count":     cnt,
            "avg_menu":  avg_menu,
            "avg_staff": avg_staff,
            "avg_clean": avg_clean,
            "avg_total": avg_total,
        }
        total += cnt

    # –î–æ–±–∞–≤–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Å—Ç–∞
    for place in PlaceEnum:
        if place.value not in stats:
            stats[place.value] = {
                "count":     0,
                "avg_menu":  0.0,
                "avg_staff": 0.0,
                "avg_clean": 0.0,
                "avg_total": 0.0,
            }

    return stats, total


@dp.callback_query(F.data == "our_feedbacks")
async def show_our_feedbacks(callback: CallbackQuery):
    stats, total = await calculate_stats_per_place()

    if not stats:
        text = "üì≠ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        lines = ["‚≠ê –ù–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"]
        # –ß—Ç–æ–±—ã –ø–æ—Ä—è–¥–æ–∫ –±—ã–ª —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω (–∫–∞–∫ –≤ enum), –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ PlaceEnum
        for place in PlaceEnum:
            name = place.value
            s = stats[name]
            lines.append("")
            lines.append(f"<b>{name}:</b>")
            lines.append("")
            lines.append(f"üçΩ<i>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –º–µ–Ω—é: {s['avg_menu']}/5</i>")
            lines.append(
                f"üëî<i>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {s['avg_staff']}/5</i>")
            lines.append(
                f"üßπ <i>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ—Ç—ã: {s['avg_clean']}/5</i>")
            lines.append(f"üî¢<i>–û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {s['avg_total']}/5</i>")

        lines.append("")
        lines.append(f"üìä<b>–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total}</b>")
        text = "\n".join(lines)

    await callback.message.edit_text(
        text=text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        )
    )
    await callback.answer()


TEST_COUNTER = 0


@dp.message(Command("test_notify"))
async def test_notification(message: Message, state: FSMContext):
    global TEST_COUNTER
    if TEST_COUNTER >= 3:
        await message.answer("üö´ –õ–∏–º–∏—Ç —Ç–µ—Å—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω")
        return
    TEST_COUNTER += 1
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞"""
    global LAST_TEST_TIME

    try:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ (–Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 2 –º–∏–Ω—É—Ç—ã)
        if LAST_TEST_TIME and (datetime.now() - LAST_TEST_TIME).total_seconds() < 120:
            await message.answer("üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 2 –º–∏–Ω—É—Ç—ã")
            return

        LAST_TEST_TIME = datetime.now()

        # –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –û–î–ù–û —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        test_feedback = Feedback(
            id=999,
            user_id=message.from_user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID
            place=PlaceEnum.POBEDA,
            menu_rating=5,
            staff_rating=4,
            cleanliness_rating=5,
            recommend=True,
            review_text=f"–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {datetime.now().strftime('%H:%M')}",
            photo_data=None,
            photo_skipped=True,
            created_at=datetime.now()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await send_feedback_notification(test_feedback)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
        current_state = await dp.storage.get_state(user=message.from_user.id)
        if current_state:
            await dp.storage.delete_data(chat=message.chat.id, user=message.from_user.id)

        await message.answer(
            f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if success else '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}\n"
            f"–ö–∞–Ω–∞–ª: {NOTIFICATION_CHANNEL_ID or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
        logger.error(f"–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)


@dp.message(Command("show_config"))
async def show_config(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return

    config = f"""
    –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
    BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
    CHANNEL_ID: {NOTIFICATION_CHANNEL_ID or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
    """
    await message.answer(config)


async def alternative_send():
    try:
        await bot.send_message(
            chat_id=int(NOTIFICATION_CHANNEL_ID),
            text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –º–µ—Ç–æ–¥–æ–º"
        )
        return True
    except Exception as e:
        logger.error(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {str(e)}")
        return False


# ========== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==========

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
